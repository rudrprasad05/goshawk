// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SELLER
}

enum Plan {
  FREE
  GOLD
  DIAMOND
  PLATINUM
}

enum AlertType {
  SUCCESS
  ERROR
  INFO
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Alert {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  type      AlertType
  seen      Boolean   @default(false)
  message   String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String    @unique @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model User {
  id                     String         @id @default(auto()) @map("_id") @db.ObjectId
  name                   String
  address                String?
  town                   String?
  country                String?
  phone                  String?
  email                  String         @unique
  emailVerificationToken String?        @unique
  emailVerified          DateTime?
  image                  String?
  hashedPassword         String?
  changePasswordToken    String?        @unique
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  conversationIds        String[]       @db.ObjectId
  role                   Role           @default(USER)
  conversations          Conversation[] @relation(fields: [conversationIds], references: [id])
  accounts               Account[]
  orders                 Order[]
  messages               Message[]
  repairs                RepairOrder[]
  alerts                 Alert[]
  reviews                Review[]
  seller                 Seller?
  wishlist               Wishlist?
  giftsOrders            GiftOrder[]
}

model Seller {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  companyName    String          @unique
  plan           String?
  isPaid         Boolean         @default(false)
  isVerified     Boolean         @default(false)
  image          String?
  hashedPassword String?
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String          @unique @db.ObjectId
  ads            Ad[]
  products       Products[]
  merchantOrder  MerchantOrder[]
  Funnels        Website?
  subscription   Subscription?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Subscription {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  plan                 Plan     @default(FREE)
  mId                  Int      @unique
  active               Boolean  @default(false)
  currentPeriodEndDate DateTime
  sellerId             String   @unique @db.ObjectId
  seller               Seller   @relation(fields: [sellerId], references: [id])
}

model Products {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  price            Float
  imageUrl         String[]
  description      String
  isVisible        Boolean        @default(true)
  isVerified       Boolean        @default(false)
  seller           Seller         @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId         String         @db.ObjectId
  category         Subcategory?   @relation(fields: [categoryId], references: [id])
  categoryId       String?        @db.ObjectId
  parentCategory   Category?      @relation(fields: [parentCategoryId], references: [id])
  parentCategoryId String?        @db.ObjectId
  orders           OrderList[]
  wishlistItem     WishlistItem[]
  reviews          Review[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  stars     Int      @default(0)
  message   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique @db.ObjectId
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String   @unique @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  customer       User            @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId     String          @db.ObjectId
  total          Int
  mpaisaId       Int             @unique
  isDelivered    Boolean         @default(false)
  isPaid         Boolean         @default(false)
  address        String
  city           String
  country        String
  contact        String
  merchantOrders MerchantOrder[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model MerchantOrder {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  isDelivered Boolean     @default(false)
  isPaid      Boolean     @default(false)
  order       Order       @relation(fields: [orderId], references: [id])
  orderId     String      @db.ObjectId
  seller      Seller      @relation(fields: [sellerId], references: [id])
  sellerId    String      @db.ObjectId
  orderLists  OrderList[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderList {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  merchantOrders   MerchantOrder @relation(fields: [merchantOrdersId], references: [id])
  merchantOrdersId String        @db.ObjectId
  product          Products      @relation(fields: [productId], references: [id])
  productId        String        @db.ObjectId
  quanity          Int
  price            Int
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

model Ad {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  isPaid      Boolean   @default(false)
  imageUrl    String
  isVerified  Boolean   @default(false)
  seller      Seller    @relation(fields: [sellerId], references: [id])
  sellerId    String    @db.ObjectId
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  billboardId String    @unique @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Billboard {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  location    String   @unique
  name        String
  description String
  ad          Ad?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Category {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  subcategories Subcategory[]
  products      Products[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Subcategory {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  parentCategory   Category   @relation(fields: [parentCategoryId], references: [id])
  parentCategoryId String     @db.ObjectId
  products         Products[]
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model Conversation {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @default(now())
  messagesIds String[]  @db.ObjectId
  messages    Message[]
  userIds     String[]  @db.ObjectId
  users       User[]    @relation(fields: [userIds], references: [id])
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  body           String?
  image          String?
  createdAt      DateTime     @default(now())
  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  senderId       String       @db.ObjectId
  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model RepairOrder {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  type        String
  description String
  model       String
  imageUrl    String
  createdAt   DateTime @default(now())
}

model Website {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  description   String?
  published     Boolean     @default(false)
  subDomainName String?     @unique
  favicon       String?
  sellerId      String      @unique @db.ObjectId
  seller        Seller      @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  webpages      WebPages[]
  liveProducts  String?     @default("[]")
  ClassName     ClassName[]
}

model ClassName {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  color      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  websiteId  String   @db.ObjectId
  customData String?
  website    Website  @relation(fields: [websiteId], references: [id], onDelete: Cascade)
}

model WebPages {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  pathName     String   @default("")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  visits       Int      @default(0)
  content      String?
  order        Int
  previewImage String?
  websiteId    String   @db.ObjectId
  website      Website  @relation(fields: [websiteId], references: [id], onDelete: Cascade)
}

model GiftOrder {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  type       String
  chocolates Int      @default(0)
  fullCake   Int      @default(0)
  sliceCake  Int      @default(0)
  letter     Int      @default(0)
  flowers    Int      @default(0)
  giftcard   Int      @default(0)
  price      Int
  delivery   Boolean  @default(false)
  coffin     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @db.ObjectId
}

model Wishlist {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  wishlistItems WishlistItem[]
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String         @unique @db.ObjectId
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model WishlistItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  wishlistId String   @db.ObjectId
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  productId  String   @db.ObjectId
  product    Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
