// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String

  address        String?
  town           String?
  country        String?
  
  phone          String?
  email          String    @unique
  emailVerified  DateTime?
  role           String    @default("buyer")
  image          String?
  hashedPassword String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conversationIds String[] @db.ObjectId
  conversations Conversation[] @relation(fields: [conversationIds], references: [id])

  accounts Account[]
  orders   Order[]
  messages Message[]
  seller   Seller?
}

model Seller {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  companyName    String  @unique
  plan           String?
  isPaid         Boolean @default(false)
  isVerified     Boolean @default(false)
  image          String?
  hashedPassword String?

  products Products[]
  merchantOrder   MerchantOrder[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.ObjectId

  ads Ad[] 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Products {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  price       String
  imageUrl    String
  description String
  isVisible   Boolean @default(true)
  isVerified  Boolean @default(false)

  seller   Seller @relation(fields: [sellerId], references: [id])
  sellerId String @db.ObjectId

  category   Subcategory? @relation(fields: [categoryId], references: [id])
  categoryId String? @db.ObjectId

  orders OrderList[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId

  customer   User        @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String      @db.ObjectId

  total      Int

  isDelivered Boolean @default(false)
  isPaid Boolean @default(false)

  address    String
  city       String
  country    String
  contact    String

  merchantOrders  MerchantOrder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MerchantOrder{
  id         String      @id @default(auto()) @map("_id") @db.ObjectId

  isDelivered Boolean @default(false)
  isPaid Boolean @default(false)

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String @db.ObjectId

  seller   Seller @relation(fields: [sellerId], references: [id])
  sellerId String @db.ObjectId

  orderLists OrderList[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model OrderList {
  id      String @id @default(auto()) @map("_id") @db.ObjectId

  merchantOrders   MerchantOrder  @relation(fields: [merchantOrdersId], references: [id])
  merchantOrdersId String @db.ObjectId

  product   Products @relation(fields: [productId], references: [id])
  productId String @db.ObjectId

  quanity Int
  price Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Ad {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  isPaid     Boolean @default(false)
  imageUrl   String
  isVerified Boolean @default(false)

  seller   Seller @relation(fields: [sellerId], references: [id])
  sellerId String @db.ObjectId

  billboard   Billboard @relation(fields: [billboardId], references: [id])
  billboardId String @unique @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Billboard{
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  location String @unique
  name String
  description String

  ad Ad?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category{
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  subcategories Subcategory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Subcategory{
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  parentCategory Category @relation(fields: [parentCategoryId], references: [id])
  parentCategoryId String @db.ObjectId

  products Products[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Conversation{
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt       DateTime @default(now())
  
  messagesIds String[] @db.ObjectId
  messages Message[]

  userIds String[] @db.ObjectId
  users User[] @relation(fields: [userIds], references: [id])
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String?
  image String?
  createdAt DateTime @default(now())

  conversationId String @db.ObjectId
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  senderId String @db.ObjectId
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
}